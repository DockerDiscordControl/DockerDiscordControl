# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                    🚀 Optimized Dockerfile for DDC Production               ║
# ║                                                                              ║
# ║  Features:                                                                   ║
# ║  - Optimized layer caching                                                   ║
# ║  - Parallel dependency installation                                          ║
# ║  - Reduced image size                                                        ║
# ║  - Faster build times                                                        ║
# ╚══════════════════════════════════════════════════════════════════════════════╝

# Use specific Python version with better caching
FROM python:3.12-alpine AS base

# Install system dependencies in a single layer (cached)
RUN apk update && apk upgrade && \
    apk add --no-cache \
        supervisor \
        curl \
        ca-certificates \
        docker-cli \
        openssl=3.5.1-r0 && \
    rm -rf /var/cache/apk/*

# ═══════════════════════════════════════════════════════════════════════════════
# Build Stage - Dependencies
# ═══════════════════════════════════════════════════════════════════════════════
FROM base AS builder

# Install build dependencies
RUN apk add --no-cache --virtual .build-deps \
        gcc \
        g++ \
        musl-dev \
        python3-dev \
        libffi-dev \
        make \
        openssl-dev

# Create virtual environment
RUN python -m venv /venv
ENV PATH="/venv/bin:$PATH"

# Copy requirements first for better caching
COPY requirements.txt /tmp/requirements.txt

# Install Python dependencies with optimization
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r /tmp/requirements.txt && \
    pip install --no-cache-dir --force-reinstall --upgrade \
        "aiohttp>=3.12.14" \
        "setuptools>=78.1.1" && \
    find /venv -name "*.pyc" -delete && \
    find /venv -name "__pycache__" -type d -exec rm -rf {} + || true

# ═══════════════════════════════════════════════════════════════════════════════
# Final Stage - Runtime
# ═══════════════════════════════════════════════════════════════════════════════
FROM base AS runtime

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PATH="/venv/bin:$PATH" \
    DDC_ENVIRONMENT=production \
    DDC_CACHE_TTL=300 \
    DDC_DOCKER_CACHE_DURATION=600

# Copy virtual environment from builder
COPY --from=builder /venv /venv

# Create application directories
RUN mkdir -p /app/config /app/logs /app/scripts /app/heartbeat_monitor && \
    chmod 755 /app && \
    chmod 777 /app/config /app/logs

# Copy application code (optimized order)
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY scripts/fix_permissions.sh /app/scripts/
COPY heartbeat_monitor/ddc_heartbeat_monitor.py /app/heartbeat_monitor/

# Copy main application
COPY --chown=root:root . /app/

# Set environment variables
ENV ENV_FLASK_SECRET_KEY="ddc-production-secret-2024-secure-key-default" \
    ENV_DDC_ENVIRONMENT="production" \
    ENV_DDC_CACHE_TTL="300" \
    ENV_DDC_DOCKER_CACHE_DURATION="60"

# Compile Python files and cleanup (keep essential files)
RUN python -m compileall -b /app 2>/dev/null || true && \
    find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    chmod +x /app/scripts/fix_permissions.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:9374/health || exit 1

# Expose port
EXPOSE 9374

# Run supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"] 