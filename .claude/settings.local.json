{
  "permissions": {
    "allow": [
      "Bash(python3:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(chmod:*)",
      "Bash(docker exec:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(git tag:*)",
      "Bash(git fetch:*)",
      "Bash(gh release create:*)",
      "Bash(sed:*)",
      "Bash(git rm:*)",
      "Bash(./update-github-wiki.sh)",
      "Bash(npm:*)",
      "Bash(sudo chown:*)",
      "Bash(git checkout:*)",
      "Bash(rm:*)",
      "Bash(git commit:*)",
      "Bash(python -m pytest -xvs -k \"test\" --tb=short)",
      "Bash(echo:*)",
      "Bash(git ls-tree:*)",
      "WebFetch(domain:discord.com)",
      "Bash(git restore:*)",
      "Bash(rg:*)",
      "Bash(python -m pytest --version)",
      "Bash(python -m pytest -xvs tests/ --tb=short)",
      "Bash(sudo touch:*)",
      "Bash(sudo chmod:*)",
      "Bash(DDC_WEB_PORT=5001 python3 -m app.web_ui)",
      "Bash(touch:*)",
      "Bash(mv:*)",
      "Bash(pip3 install:*)",
      "Bash(curl:*)",
      "Bash(mkdir:*)",
      "Bash(python -m pytest systems/tests/test_mech_master.py -v)",
      "Bash(python:*)",
      "Bash(sudo python3:*)",
      "Bash(sudo rm:*)",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Total: {state.total_donated}'')\nprint(f''Level: {state.level} - {state.level_name}'')\nprint(f''Fuel: {state.fuel}'')\nprint(f''Bars - fuel_current: {state.bars.fuel_current}'')\nprint(f''Bars - fuel_max: {state.bars.fuel_max_for_level}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Total: {state.total_donated}'')\nprint(f''Level: {state.level} - {state.level_name}'')\nprint(f''Fuel: {state.fuel}'')\nprint(f''Bars - fuel_current: {state.bars.fuel_current}'')\nprint(f''Bars - fuel_max: {state.bars.fuel_max_for_level}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nprint(''Before reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\n# Manual reset via store\nstore_data = {''donations'': []}\nservice.store.save(store_data)\nprint(''After reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nprint(''Before reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\n# Manual reset via store\nstore_data = {''donations'': []}\nservice.store.save(store_data)\nprint(''After reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nprint(''Before reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\n# Manual reset via store\nstore_data = {''donations'': []}\nservice.store.save(store_data)\nprint(''After reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nprint(''Before reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\n# Manual reset via store\nstore_data = {''donations'': []}\nservice.store.save(store_data)\nprint(''After reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Total: {state.total_donated}'')\nprint(f''Level: {state.level} - {state.level_name}'')\nprint(f''Fuel: {state.fuel}'')\nprint(f''Bars - fuel_current: {state.bars.fuel_current}'')\nprint(f''Bars - fuel_max: {state.bars.fuel_max_for_level}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Total: {state.total_donated}'')\nprint(f''Level: {state.level} - {state.level_name}'')\nprint(f''Fuel: {state.fuel}'')\nprint(f''Glvl: {state.glvl}'')\nprint(f''Glvl_max: {state.glvl_max}'')\nprint(f''Bars - fuel_current: {state.bars.fuel_current}'')\nprint(f''Bars - fuel_max: {state.bars.fuel_max_for_level}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Total: {state.total_donated}'')\nprint(f''Level: {state.level} - {state.level_name}'')\nprint(f''Fuel: {state.fuel}'')\nprint(f''Bars - fuel_current: {state.bars.fuel_current}'')\nprint(f''Bars - fuel_max: {state.bars.fuel_max_for_level}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nimport json\n\n# Read raw donation data\nwith open(''config/mech_donations.json'', ''r'') as f:\n    data = json.load(f)\n    \ndonations = data.get(''donations'', [])\nfor i, donation in enumerate(donations):\n    print(f''Donation {i+1}: {donation}'')\n    \n# Check if there''s time decay happening\nprint()\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Calculated fuel: {state.fuel}'')\nprint(f''Expected fuel without decay: 5'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nimport requests\nimport time\nimport json\n\n# Test multiple rapid requests to the status endpoint\nprint(''Testing /api/donation/status endpoint...'')\n\ntry:\n    # Make several rapid requests to simulate the 3-second interval calls\n    for i in range(5):\n        response = requests.get(''http://localhost:5001/api/donation/status'', \n                              auth=(''admin'', ''admin''),\n                              timeout=5)\n        print(f''Request {i+1}: Status {response.status_code}'')\n        if response.status_code == 200:\n            data = response.json()\n            print(f''  Fuel: {data.get(\"\"current_fuel\"\", \"\"N/A\"\")}'')\n        elif response.status_code == 429:\n            print(f''  Rate limited: {response.text}'')\n        else:\n            print(f''  Error: {response.text}'')\n        time.sleep(1)  # 1 second between requests (faster than 3-second interval)\n        \nexcept Exception as e:\n    print(f''Connection error: {e}'')\n    print(''Web server may not be running, starting it...'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\n\nprint(''Testing donation modal functionality...'')\nprint(''Current state:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}'')\nprint(f''Fuel: {state.fuel}'')\nprint()\n\n# Test adding a donation like the modal would\nprint(''Testing donation addition (like modal would do):'')\ntry:\n    new_state = service.add_donation(\n        username=''Discord:TestUser'',\n        amount=5\n    )\n    print(f''Success! New total: {new_state.total_donated}, New fuel: {new_state.fuel}'')\nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom utils.donation_utils import generate_sample_key, validate_donation_key\n\n# Generate a sample key for today\nsample_key = generate_sample_key(''20250826'')\nprint(f''Sample key for testing: {sample_key}'')\n\n# Validate it\nis_valid = validate_donation_key(sample_key)\nprint(f''Key validation: {is_valid}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom utils.donation_utils import generate_sample_key, validate_donation_key\n\n# Test the JavaScript hash algorithm consistency\ndef test_key(date_str, suffix):\n    combined = date_str + suffix + ''DDC_SECRET_2025''\n    hash_value = 0\n    for char in combined:\n        hash_value = ((hash_value << 5) - hash_value) + ord(char)\n        hash_value = hash_value & hash_value  # 32-bit\n    \n    abs_hash = abs(hash_value)\n    base36_str = ''''\n    base36_chars = ''0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ''\n    \n    while abs_hash > 0 and len(base36_str) < 4:\n        base36_str = base36_chars[abs_hash % 36] + base36_str\n        abs_hash = abs_hash // 36\n    \n    expected = base36_str[:4].ljust(4, ''0'')\n    key = f''DDC-DISABLE-{date_str}-{expected}''\n    return key\n\n# Create a key and test validation\ntest_key_result = test_key(''20250826'', ''TEST'')\nprint(f''Generated test key: {test_key_result}'')\nprint(f''Validation result: {validate_donation_key(test_key_result)}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom utils.donation_utils import validate_donation_key, generate_sample_key, is_donations_disabled\n\n# Test the premium keys\ntest_keys = [\n    ''DDC-DISABLE-2025-PREMIUM'',\n    ''DDC-PREMIUM-DISABLE-2025'',\n    ''ddc-disable-2025-premium'',  # lowercase\n    ''INVALID-KEY-123''\n]\n\nprint(''Testing donation key validation:'')\nfor key in test_keys:\n    result = validate_donation_key(key)\n    print(f''Key: {key} -> Valid: {result}'')\n\nprint()\nprint(f''Sample key: {generate_sample_key()}'')\nprint(f''Donations currently disabled: {is_donations_disabled()}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom utils.donation_utils import validate_donation_key, generate_sample_key, is_donations_disabled\n\n# Test the new complex keys\ntest_keys = [\n    ''DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025'',\n    ''DDC-LIFETIME-8F9A-3P2K-7QLM-BHXC-2025'',\n    ''DOCKER-DISCORD-CTRL-9G4B-5ZNW-PREMIUM'',\n    ''DDC-COMMERCIAL-KL8E-4RTS-6MQV-DISABLE'',\n    ''DDC-2025-ENTERPRISE-3YH9-BMKX-7FQL-PRO'',\n    ''ddc-pro-24k5-9xh7-m3nq-yzef-2025'',  # lowercase\n    ''INVALID-KEY-SIMPLE'',\n    ''DDC-DISABLE-2025-PREMIUM''  # old format\n]\n\nprint(''Testing new complex donation keys:'')\nfor key in test_keys:\n    result = validate_donation_key(key)\n    print(f''Key: {key[:30]}{''...'' if len(key) > 30 else ''''} -> Valid: {result}'')\n\nprint()\nprint(f''Sample key: {generate_sample_key()}'')\nprint(f''Donations currently disabled: {is_donations_disabled()}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom utils.donation_utils import validate_donation_key, generate_sample_key, is_donations_disabled\n\n# Test the new complex keys\ntest_keys = [\n    ''DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025'',\n    ''DDC-LIFETIME-8F9A-3P2K-7QLM-BHXC-2025'',\n    ''DOCKER-DISCORD-CTRL-9G4B-5ZNW-PREMIUM'',\n    ''DDC-COMMERCIAL-KL8E-4RTS-6MQV-DISABLE'',\n    ''DDC-2025-ENTERPRISE-3YH9-BMKX-7FQL-PRO'',\n    ''ddc-pro-24k5-9xh7-m3nq-yzef-2025'',  # lowercase\n    ''INVALID-KEY-SIMPLE'',\n    ''DDC-DISABLE-2025-PREMIUM''  # old format\n]\n\nprint(''Testing new complex donation keys:'')\nfor key in test_keys:\n    result = validate_donation_key(key)\n    short_key = key[:30] + ''...'' if len(key) > 30 else key\n    print(f''Key: {short_key} -> Valid: {result}'')\n\nprint()\nprint(f''Sample key: {generate_sample_key()}'')\nprint(f''Donations currently disabled: {is_donations_disabled()}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom utils.donation_utils import validate_donation_key, generate_sample_key, is_donations_disabled\n\nprint(''=== DONATION KEY SYSTEM TEST ==='')\nprint()\n\n# Test all the new complex keys\nprint(''Testing all valid license keys:'')\ntest_keys = [\n    ''DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025'',\n    ''DDC-LIFETIME-8F9A-3P2K-7QLM-BHXC-2025'',\n    ''DOCKER-DISCORD-CTRL-9G4B-5ZNW-PREMIUM'',\n    ''DDC-COMMERCIAL-KL8E-4RTS-6MQV-DISABLE'',\n    ''DDC-2025-ENTERPRISE-3YH9-BMKX-7FQL-PRO''\n]\n\nfor i, key in enumerate(test_keys, 1):\n    result = validate_donation_key(key)\n    print(f''{i}. {key} -> ✅ Valid: {result}'')\n\nprint()\nprint(''Testing case insensitivity:'')\nlowercase_key = ''ddc-pro-24k5-9xh7-m3nq-yzef-2025''\nmixed_key = ''DDC-lifetime-8f9a-3P2K-7qlm-BHXC-2025''\nprint(f''Lowercase: {lowercase_key} -> ✅ Valid: {validate_donation_key(lowercase_key)}'')\nprint(f''Mixed case: {mixed_key} -> ✅ Valid: {validate_donation_key(mixed_key)}'')\n\nprint()\nprint(''Testing invalid keys:'')\ninvalid_keys = [\n    ''INVALID-KEY-123'',\n    ''DDC-DISABLE-2025-PREMIUM'',  # old simple format\n    ''WRONG-FORMAT-KEY'',\n    ''DDC-PRO-WRONG-SEGMENTS'',\n    ''''  # empty\n]\n\nfor key in invalid_keys:\n    result = validate_donation_key(key)\n    display_key = key if key else ''[empty]''\n    print(f''{display_key} -> ❌ Valid: {result}'')\n\nprint()\nprint(''System status:'')\nprint(f''Sample key for purchase: {generate_sample_key()}'')\nprint(f''Donations currently disabled: {is_donations_disabled()}'')\nprint()\nprint(''=== TEST COMPLETED ==='')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\n# Test if we can save a key to config and then load it\nfrom utils.config_loader import load_config, save_config\nfrom utils.donation_utils import is_donations_disabled\n\nprint(''=== CONFIG INTEGRATION TEST ==='')\nprint()\n\n# Load current config\nconfig = load_config()\nprint(f''Current config loaded: {type(config)}'')\n\n# Check if we already have a key\ncurrent_key = config.get(''donation_disable_key'', '''')\nprint(f''Current key in config: {current_key or \"\"[none]\"\"}'')\n\n# Test the donation status function\ndonations_disabled = is_donations_disabled()\nprint(f''Donations currently disabled: {donations_disabled}'')\n\n# Show what would happen with a valid key\ntest_config = config.copy()\ntest_config[''donation_disable_key''] = ''DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025''\n\nprint()\nprint(''If we set a valid key in config:'')\nprint(f''Key would be: {test_config[\"\"donation_disable_key\"\"]}'')\n\n# Simulate the is_donations_disabled check with test config\nfrom utils.donation_utils import validate_donation_key\nkey = test_config.get(''donation_disable_key'', '''').strip()\nwould_be_disabled = validate_donation_key(key) if key else False\nprint(f''Donations would be disabled: {would_be_disabled}'')\n\nprint()\nprint(''=== CONFIG TEST COMPLETED ==='')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\n# Test the actual Web UI integration\nprint(''=== WEB UI INTEGRATION TEST ==='')\nprint()\n\ntry:\n    from app.blueprints.main_routes import main_bp\n    from utils.donation_utils import is_donations_disabled\n    \n    print(''✅ Successfully imported main_routes and donation_utils'')\n    \n    # Test the donations_disabled function that would be used in templates\n    disabled = is_donations_disabled()\n    print(f''✅ is_donations_disabled() returned: {disabled}'')\n    \n    # Test if we can access the validation functions\n    from utils.donation_utils import validate_donation_key, get_valid_keys\n    \n    valid_keys = get_valid_keys()\n    print(f''✅ Available license keys: {len(valid_keys)} keys'')\n    \n    # Test one key\n    test_result = validate_donation_key(''DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025'')\n    print(f''✅ Test key validation: {test_result}'')\n    \n    print()\n    print(''Web UI integration: ✅ READY'')\n    \nexcept Exception as e:\n    print(f''❌ Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\nprint()\n\n# Test Discord integration\nprint(''=== DISCORD INTEGRATION TEST ==='')\ntry:\n    # Import the discord control functions that use donation_utils\n    import sys\n    import os\n    project_root = os.path.dirname(os.path.dirname(os.path.abspath(''.'')))\n    if project_root not in sys.path:\n        sys.path.insert(0, project_root)\n    \n    # Test if we can import discord components\n    print(''✅ Path setup completed'')\n    \n    # Test donation utils in discord context\n    from utils.donation_utils import is_donations_disabled\n    disabled_status = is_donations_disabled()\n    print(f''✅ Discord would see donations_disabled: {disabled_status}'')\n    \n    print()\n    print(''Discord integration: ✅ READY'')\n    \nexcept Exception as e:\n    print(f''❌ Error: {e}'')\n\nprint()\nprint(''=== INTEGRATION TESTS COMPLETED ==='')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom utils.donation_utils import is_donations_disabled, validate_donation_key\nfrom utils.config_loader import load_config\n\nprint(''=== DONATION REACTIVATION TEST ==='')\nprint()\n\n# Test 1: No key in config (normal state)\nprint(''Test 1: Normal state (no key)'')\nconfig = load_config()\nprint(f''Current key in config: {config.get(\"\"donation_disable_key\"\", \"\"[none]\"\")}'')\nprint(f''Donations disabled: {is_donations_disabled()}'')\nprint()\n\n# Test 2: Simulate valid key in config\nprint(''Test 2: Simulating valid key in config'')\n# We can''t actually save due to permissions, but we can test the logic\ntest_key = ''DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025''\nprint(f''If key was: {test_key}'')\nprint(f''Key would be valid: {validate_donation_key(test_key)}'')\nprint()\n\n# Test 3: Test empty key (user removes the key)\nprint(''Test 3: Empty key (user removes key)'')\nempty_key = ''''\nprint(f''Empty key: \"\"{empty_key}\"\"'')\nprint(f''Empty key validation: {validate_donation_key(empty_key)}'')\nprint()\n\n# Test 4: Test whitespace only key\nprint(''Test 4: Whitespace only key'')\nwhitespace_key = ''   ''\nprint(f''Whitespace key: \"\"{whitespace_key}\"\"'')\nprint(f''Whitespace key validation: {validate_donation_key(whitespace_key)}'')\nprint()\n\n# Test 5: Test the strip() functionality\nprint(''Test 5: Key with extra spaces'')\nspaced_key = ''  DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025  ''\nprint(f''Spaced key: \"\"{spaced_key}\"\"'')\nprint(f''Spaced key validation: {validate_donation_key(spaced_key)}'')\nprint()\n\nprint(''=== REACTIVATION LOGIC TEST ==='')\nprint(''✅ Empty key -> Donations ENABLED'')\nprint(''✅ Invalid key -> Donations ENABLED'') \nprint(''✅ Valid key -> Donations DISABLED'')\nprint(''✅ Remove valid key -> Donations ENABLED again'')\nprint()\nprint(''System properly handles key removal for reactivation!'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\n# Test the config processing logic for key removal\nprint(''=== CONFIG PROCESSING REACTIVATION TEST ==='')\nprint()\n\n# Test what happens in the config processing when key is removed\nfrom utils.config_loader import process_config_form\n\n# Simulate form data with empty key (user cleared the field)\nprint(''Test 1: User clears the key field'')\nform_data_empty = {''donation_disable_key'': ''''}\ncurrent_config = {''donation_disable_key'': ''DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025''}  # Had a key before\n\nprocessed_config, success, message = process_config_form(form_data_empty, current_config)\nprint(f''Form data: donation_disable_key = \"\"\"\"'')\nprint(f''Previous config had key: {current_config.get(\"\"donation_disable_key\"\", \"\"none\"\")}'')\nprint(f''Processing success: {success}'')\nprint(f''Key in processed config: {processed_config.get(\"\"donation_disable_key\"\", \"\"[removed]\"\")}'')\nprint()\n\n# Test with whitespace key\nprint(''Test 2: User enters only spaces'')\nform_data_spaces = {''donation_disable_key'': ''   ''}\nprocessed_config2, success2, message2 = process_config_form(form_data_spaces, current_config)\nprint(f''Form data: donation_disable_key = \"\"   \"\"'')\nprint(f''Processing success: {success2}'')\nprint(f''Key in processed config: {processed_config2.get(\"\"donation_disable_key\"\", \"\"[removed]\"\")}'')\nprint()\n\n# Test with valid key to invalid key\nprint(''Test 3: User changes valid key to invalid key'')\nform_data_invalid = {''donation_disable_key'': ''INVALID-KEY-123''}\nprocessed_config3, success3, message3 = process_config_form(form_data_invalid, current_config)\nprint(f''Form data: donation_disable_key = \"\"INVALID-KEY-123\"\"'')\nprint(f''Processing success: {success3}'')\nprint(f''Key in processed config: {processed_config3.get(\"\"donation_disable_key\"\", \"\"[not set]\"\")}'')\nprint()\n\nprint(''=== CONFIG PROCESSING RESULTS ==='')\nprint(''✅ Empty key -> Key removed from config -> Donations reactivated'')\nprint(''✅ Whitespace key -> Key removed from config -> Donations reactivated'')  \nprint(''✅ Invalid key -> Key kept but invalid -> Donations reactivated'')\nprint(''✅ System handles all reactivation scenarios correctly!'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nprint(''=== EDGE CASE TESTING ==='')\nprint()\n\n# Test 1: Sehr langer Key Input\nprint(''Test 1: Sehr langer Key (> 80 Zeichen)'')\nfrom utils.donation_utils import validate_donation_key\nlong_key = ''DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025'' * 5  # Viel zu lang\nprint(f''Langer Key (truncated): {long_key[:50]}...'')\nprint(f''Validierung: {validate_donation_key(long_key)}'')\nprint()\n\n# Test 2: SQL Injection Versuch\nprint(''Test 2: SQL Injection Versuch'')\nsql_key = \"\"''; DROP TABLE users; --\"\"\nprint(f''SQL Key: {sql_key}'')\nprint(f''Validierung: {validate_donation_key(sql_key)}'')\nprint()\n\n# Test 3: XSS Versuch\nprint(''Test 3: XSS Versuch'')\nxss_key = ''<script>alert(\"\"hack\"\")</script>''\nprint(f''XSS Key: {xss_key}'')\nprint(f''Validierung: {validate_donation_key(xss_key)}'')\nprint()\n\n# Test 4: Unicode/Sonderzeichen\nprint(''Test 4: Unicode/Sonderzeichen'')\nunicode_key = ''DDC-PRÖ-24K5-9XH7-M3NQ-ŸZEF-2025''\nprint(f''Unicode Key: {unicode_key}'')\nprint(f''Validierung: {validate_donation_key(unicode_key)}'')\nprint()\n\n# Test 5: None/Null Values\nprint(''Test 5: None/Null Values'')\ntry:\n    print(f''None: {validate_donation_key(None)}'')\nexcept Exception as e:\n    print(f''None Error: {e}'')\nprint()\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nprint(''=== CONFIG PROCESSING EDGE CASES ==='')\nprint()\n\n# Test Config Processing mit gefährlichen Inputs\nfrom utils.config_loader import process_config_form\n\n# Test 1: Sehr große Config Form\nprint(''Test 1: Sehr große Config Form'')\nhuge_form = {}\nfor i in range(1000):\n    huge_form[f''fake_field_{i}''] = f''value_{i}''\nhuge_form[''donation_disable_key''] = ''DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025''\n\ntry:\n    config, success, message = process_config_form(huge_form, {})\n    print(f''Verarbeitung erfolgreich: {success}'')\n    print(f''Key gespeichert: {\"\"donation_disable_key\"\" in config}'')\nexcept Exception as e:\n    print(f''Fehler: {e}'')\nprint()\n\n# Test 2: Liste statt String als Key\nprint(''Test 2: Liste als Key Input'')\nlist_form = {''donation_disable_key'': [''DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025'', ''EXTRA'']}\ntry:\n    config, success, message = process_config_form(list_form, {})\n    print(f''Verarbeitung erfolgreich: {success}'')\n    print(f''Key wert: {config.get(\"\"donation_disable_key\"\", \"\"NOT_FOUND\"\")}'')\nexcept Exception as e:\n    print(f''Fehler: {e}'')\nprint()\n\n# Test 3: Integer als Key\nprint(''Test 3: Integer als Key'')\nint_form = {''donation_disable_key'': 12345}\ntry:\n    config, success, message = process_config_form(int_form, {})\n    print(f''Verarbeitung erfolgreich: {success}'')\n    print(f''Key wert: {config.get(\"\"donation_disable_key\"\", \"\"NOT_FOUND\"\")}'')\nexcept Exception as e:\n    print(f''Fehler: {e}'')\nprint()\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nprint(''=== FIXED CONFIG PROCESSING TEST ==='')\nprint()\n\nfrom utils.config_loader import process_config_form\n\n# Test 1: Gültiger Key\nprint(''Test 1: Gültiger Key'')\nvalid_form = {''donation_disable_key'': ''DDC-PRO-24K5-9XH7-M3NQ-YZEF-2025''}\ntry:\n    config, success, message = process_config_form(valid_form, {})\n    print(f''✅ Verarbeitung erfolgreich: {success}'')\n    print(f''✅ Key gespeichert: {\"\"donation_disable_key\"\" in config}'')\n    if ''donation_disable_key'' in config:\n        print(f''✅ Key Wert: {config[\"\"donation_disable_key\"\"]}'')\nexcept Exception as e:\n    print(f''❌ Fehler: {e}'')\nprint()\n\n# Test 2: Ungültiger Key\nprint(''Test 2: Ungültiger Key'') \ninvalid_form = {''donation_disable_key'': ''INVALID-KEY-123''}\ntry:\n    config, success, message = process_config_form(invalid_form, {})\n    print(f''✅ Verarbeitung erfolgreich: {success}'')\n    print(f''✅ Key NICHT gespeichert: {\"\"donation_disable_key\"\" not in config}'')\nexcept Exception as e:\n    print(f''❌ Fehler: {e}'')\nprint()\n\n# Test 3: XSS Attack\nprint(''Test 3: XSS Attack'')\nxss_form = {''donation_disable_key'': ''<script>alert(\"\"hack\"\")</script>''}\ntry:\n    config, success, message = process_config_form(xss_form, {})\n    print(f''✅ Verarbeitung erfolgreich: {success}'')\n    print(f''✅ XSS Key abgelehnt: {\"\"donation_disable_key\"\" not in config}'')\nexcept Exception as e:\n    print(f''❌ Fehler: {e}'')\nprint()\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c:*)",
      "Bash(cat:*)"
    ],
    "deny": []
  }
}