{
  "permissions": {
    "allow": [
      "Bash(python3:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(chmod:*)",
      "Bash(docker exec:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(git tag:*)",
      "Bash(git fetch:*)",
      "Bash(gh release create:*)",
      "Bash(sed:*)",
      "Bash(git rm:*)",
      "Bash(./update-github-wiki.sh)",
      "Bash(npm:*)",
      "Bash(sudo chown:*)",
      "Bash(git checkout:*)",
      "Bash(rm:*)",
      "Bash(git commit:*)",
      "Bash(python -m pytest -xvs -k \"test\" --tb=short)",
      "Bash(echo:*)",
      "Bash(git ls-tree:*)",
      "WebFetch(domain:discord.com)",
      "Bash(git restore:*)",
      "Bash(rg:*)",
      "Bash(python -m pytest --version)",
      "Bash(python -m pytest -xvs tests/ --tb=short)",
      "Bash(sudo touch:*)",
      "Bash(sudo chmod:*)",
      "Bash(DDC_WEB_PORT=5001 python3 -m app.web_ui)",
      "Bash(touch:*)",
      "Bash(mv:*)",
      "Bash(pip3 install:*)",
      "Bash(curl:*)",
      "Bash(mkdir:*)",
      "Bash(python -m pytest systems/tests/test_mech_master.py -v)",
      "Bash(python:*)",
      "Bash(sudo python3:*)",
      "Bash(sudo rm:*)",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Total: {state.total_donated}'')\nprint(f''Level: {state.level} - {state.level_name}'')\nprint(f''Fuel: {state.fuel}'')\nprint(f''Bars - fuel_current: {state.bars.fuel_current}'')\nprint(f''Bars - fuel_max: {state.bars.fuel_max_for_level}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Total: {state.total_donated}'')\nprint(f''Level: {state.level} - {state.level_name}'')\nprint(f''Fuel: {state.fuel}'')\nprint(f''Bars - fuel_current: {state.bars.fuel_current}'')\nprint(f''Bars - fuel_max: {state.bars.fuel_max_for_level}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nprint(''Before reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\n# Manual reset via store\nstore_data = {''donations'': []}\nservice.store.save(store_data)\nprint(''After reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nprint(''Before reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\n# Manual reset via store\nstore_data = {''donations'': []}\nservice.store.save(store_data)\nprint(''After reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nprint(''Before reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\n# Manual reset via store\nstore_data = {''donations'': []}\nservice.store.save(store_data)\nprint(''After reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nprint(''Before reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\n# Manual reset via store\nstore_data = {''donations'': []}\nservice.store.save(store_data)\nprint(''After reset:'')\nstate = service.get_state()\nprint(f''Total: {state.total_donated}, Fuel: {state.fuel}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Total: {state.total_donated}'')\nprint(f''Level: {state.level} - {state.level_name}'')\nprint(f''Fuel: {state.fuel}'')\nprint(f''Bars - fuel_current: {state.bars.fuel_current}'')\nprint(f''Bars - fuel_max: {state.bars.fuel_max_for_level}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Total: {state.total_donated}'')\nprint(f''Level: {state.level} - {state.level_name}'')\nprint(f''Fuel: {state.fuel}'')\nprint(f''Glvl: {state.glvl}'')\nprint(f''Glvl_max: {state.glvl_max}'')\nprint(f''Bars - fuel_current: {state.bars.fuel_current}'')\nprint(f''Bars - fuel_max: {state.bars.fuel_max_for_level}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Total: {state.total_donated}'')\nprint(f''Level: {state.level} - {state.level_name}'')\nprint(f''Fuel: {state.fuel}'')\nprint(f''Bars - fuel_current: {state.bars.fuel_current}'')\nprint(f''Bars - fuel_max: {state.bars.fuel_max_for_level}'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nfrom services.mech_service import get_mech_service\nimport json\n\n# Read raw donation data\nwith open(''config/mech_donations.json'', ''r'') as f:\n    data = json.load(f)\n    \ndonations = data.get(''donations'', [])\nfor i, donation in enumerate(donations):\n    print(f''Donation {i+1}: {donation}'')\n    \n# Check if there''s time decay happening\nprint()\nservice = get_mech_service()\nstate = service.get_state()\nprint(f''Calculated fuel: {state.fuel}'')\nprint(f''Expected fuel without decay: 5'')\n\")",
      "Bash(DDC_WEB_PORT=5001 python3 -c \"\nimport requests\nimport time\nimport json\n\n# Test multiple rapid requests to the status endpoint\nprint(''Testing /api/donation/status endpoint...'')\n\ntry:\n    # Make several rapid requests to simulate the 3-second interval calls\n    for i in range(5):\n        response = requests.get(''http://localhost:5001/api/donation/status'', \n                              auth=(''admin'', ''admin''),\n                              timeout=5)\n        print(f''Request {i+1}: Status {response.status_code}'')\n        if response.status_code == 200:\n            data = response.json()\n            print(f''  Fuel: {data.get(\"\"current_fuel\"\", \"\"N/A\"\")}'')\n        elif response.status_code == 429:\n            print(f''  Rate limited: {response.text}'')\n        else:\n            print(f''  Error: {response.text}'')\n        time.sleep(1)  # 1 second between requests (faster than 3-second interval)\n        \nexcept Exception as e:\n    print(f''Connection error: {e}'')\n    print(''Web server may not be running, starting it...'')\n\")"
    ],
    "deny": []
  }
}