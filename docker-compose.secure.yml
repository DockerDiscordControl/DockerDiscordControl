# docker-compose.secure.yml
# ENHANCED SECURITY VERSION with restricted Docker access

services:
  ddc:
    container_name: ddc
    image: dockerdiscordcontrol
    build: .
    restart: unless-stopped
    
    # SECURITY: Run as non-root user (same as Dockerfile user 'ddc')
    # user: "1000:1000"  # DISABLED: Conflicts with DDC user permissions
    
    # SECURITY: Resource limits to prevent DoS
    deploy:
      resources:
        limits:
          cpus: '2.0'      # Allow sufficient CPU for container operations
          memory: 512M     # Allow sufficient memory for Docker operations
          pids: 200        # Increased for Docker client processes
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # SECURITY: Partial read-only filesystem (disabled for functionality)
    # read_only: true  # DISABLED: DDC needs to write logs and configs
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    ports:
      - "8374:9374"
    
    volumes:
      # CRITICAL: Docker socket needs write access for container operations
      - /var/run/docker.sock:/var/run/docker.sock
      
      # Application data (writable - required for DDC functionality)
      - ./config:/app/config:cached
      - ./logs:/app/logs:cached
      
      # NOTE: Application code mount removed - built into image
    
    environment:
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      ENV_FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      ENV_DOCKER_SOCKET: 'unix:///var/run/docker.sock'
      DOCKER_SOCKET: 'unix:///var/run/docker.sock'
      DOCKER_HOST: 'unix:///var/run/docker.sock'
      
      # SECURITY: Discord Bot Token via environment variable
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN:-}
      
      # SECURITY: Hardening options (adjusted for functionality)
      DDC_SECURITY_MODE: "balanced"
    
    # SECURITY: Network restrictions
    networks:
      - ddc_network
    
    # SECURITY: Capabilities - only what's absolutely necessary
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    
    # SECURITY: Prevent privilege escalation
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    
    # SECURITY: Syscall restrictions
    sysctls:
      - net.ipv4.ip_unprivileged_port_start=0
    
    # SECURITY: Healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9374/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

# SECURITY: Isolated network
networks:
  ddc_network:
    driver: bridge
    internal: false  # Allow external access for Discord API
    ipam:
      config:
        - subnet: 172.20.0.0/24