# =============================================================================
# DDC ULTRA-OPTIMIZED ALPINE BUILD
# Removes unnecessary components for maximum performance and minimal size
# =============================================================================

# --- BUILD STAGE 1: Python Dependencies (Simplified) ---
FROM python:3.11-alpine AS python-builder
WORKDIR /build

# Just copy requirements for reference
COPY requirements-alpine.txt .

# --- BUILD STAGE 2: Application Optimization ---
FROM python:3.11-alpine AS app-builder
WORKDIR /build

# Copy source code
COPY . .

# Remove unnecessary files and directories
RUN rm -rf \
    .git .github .gitignore .dockerignore \
    tests/ wiki/ docs/ \
    *.md LICENSE CNAME \
    Dockerfile* docker-compose.yml \
    .cursor-rules \
    __pycache__/ */__pycache__/ */*/__pycache__/ \
    *.pyc */*.pyc */*/*.pyc \
    .pytest_cache/ */pytest_cache/

# Compile Python files for faster startup
RUN python -m compileall -b . && \
    # Only delete test files and documentation, keep all essential Python modules
    find . -name "test_*.py" -delete && \
    find . -name "*_test.py" -delete && \
    find . -path "*/tests/*" -name "*.py" -delete

# --- BUILD STAGE 3: Minimal Runtime Dependencies ---
FROM alpine:3.19 AS runtime-deps

# Install only essential runtime packages including Python 3.11
RUN apk add --no-cache \
    python3 \
    py3-pip \
    supervisor \
    docker-cli \
    ca-certificates \
    tzdata \
    curl \
    gcc \
    musl-dev \
    python3-dev \
    libffi-dev && \
    # Create symlinks for Python
    ln -sf /usr/bin/python3 /usr/bin/python && \
    # Remove unnecessary files
    rm -rf /var/cache/apk/* \
           /usr/share/man/* \
           /usr/share/doc/* \
           /usr/share/info/* \
           /tmp/*

# --- FINAL STAGE: Ultra-Optimized Runtime ---
FROM runtime-deps
WORKDIR /app

# Set optimized environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONOPTIMIZE=2 \
    PATH="/opt/venv/bin:$PATH" \
    VIRTUAL_ENV="/opt/venv" \
    DOCKER_HOST="unix:///var/run/docker.sock" \
    # Performance optimizations
    DDC_DOCKER_CACHE_DURATION=45 \
    DDC_BACKGROUND_REFRESH_INTERVAL=30 \
    DDC_MAX_CACHED_CONTAINERS=100 \
    DDC_SCHEDULER_CHECK_INTERVAL=120 \
    DDC_MAX_CONCURRENT_TASKS=3 \
    # Memory optimizations
    GUNICORN_WORKERS=2 \
    GUNICORN_MAX_REQUESTS=300 \
    GUNICORN_TIMEOUT=45 \
    # Disable unnecessary Python features
    PYTHONDEBUG=0 \
    PYTHONHASHSEED=random

# Copy application
COPY --from=app-builder /build /app
COPY --from=python-builder /build/requirements-alpine.txt /app/

# Create virtual environment and install packages (direct installation)
RUN python -m venv /opt/venv && \
    # Ensure pip is properly installed
    /opt/venv/bin/python -m ensurepip --upgrade && \
    /opt/venv/bin/pip install --no-cache-dir --upgrade pip setuptools wheel && \
    # Install packages with verbose output for debugging
    /opt/venv/bin/pip install --no-cache-dir --verbose -r requirements-alpine.txt && \
    # Verify critical imports work
    /opt/venv/bin/python -c "import flask; import werkzeug.security; import discord; print('All imports successful')" && \
    # Clean up build dependencies after installation
    apk del gcc musl-dev python3-dev libffi-dev && \
    # Clean up pip cache
    rm -rf /root/.cache/pip

# Create optimized supervisor configuration
RUN mkdir -p /app/config /app/logs /etc/supervisor/conf.d && \
    chmod 755 /app/config /app/logs

# Create ultra-optimized supervisor config
COPY <<EOF /etc/supervisor/conf.d/supervisord.conf
[supervisord]
nodaemon=true
user=root
logfile=/app/logs/supervisord.log
logfile_maxbytes=2MB
logfile_backups=1
loglevel=warn
pidfile=/tmp/supervisord.pid

[program:discordbot]
command=/opt/venv/bin/python /app/bot.py
directory=/app
autostart=true
autorestart=true
startretries=2
stopwaitsecs=5
redirect_stderr=true
stdout_logfile=/app/logs/discord.log
stdout_logfile_maxbytes=5MB
stdout_logfile_backups=1
user=root
environment=DOCKER_SOCKET="/var/run/docker.sock"

[program:webui]
command=/opt/venv/bin/gunicorn -c /app/gunicorn_config_optimized.py app.web_ui:create_app()
directory=/app
autostart=true
autorestart=true
startretries=2
stopwaitsecs=5
redirect_stderr=true
stdout_logfile=/app/logs/webui.log
stdout_logfile_maxbytes=5MB
stdout_logfile_backups=1
user=root
environment=DOCKER_SOCKET="/var/run/docker.sock"

[group:ddc]
programs=discordbot,webui
priority=999
EOF

# Create optimized gunicorn config override
COPY <<EOF /app/gunicorn_config_optimized.py
# Ultra-optimized Gunicorn configuration for Alpine
import os
import multiprocessing

# Minimal worker configuration
cpu_count = multiprocessing.cpu_count()
workers = max(1, min(2, cpu_count))

# Connection settings
bind = "0.0.0.0:9374"
worker_class = "gevent"
worker_connections = 100  # Reduced from 200
threads = 1
timeout = 30  # Reduced from 45
keepalive = 2
max_requests = 200  # Reduced from 300
max_requests_jitter = 20

# Logging
loglevel = "warning"  # Reduced from info
access_log_format = '%(h)s "%(r)s" %(s)s %(b)s'

# Memory optimization
preload_app = True
max_worker_memory = 200 * 1024 * 1024  # 200MB per worker

def when_ready(server):
    server.log.info(f"Ultra-optimized DDC starting with {workers} workers")

def worker_int(worker):
    worker.log.info("Worker received INT or QUIT signal")
    import gc
    gc.collect()
EOF

# Final cleanup and optimization
RUN find /app -name "*.pyc" -delete && \
    find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /opt/venv -name "*.pyc" -delete && \
    find /opt/venv -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    # Remove unnecessary pip cache
    rm -rf /opt/venv/lib/python*/site-packages/pip* && \
    rm -rf /opt/venv/lib/python*/site-packages/setuptools/tests && \
    rm -rf /opt/venv/lib/python*/site-packages/wheel* && \
    # Remove test files from packages
    find /opt/venv -name "test*" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /opt/venv -name "*test*" -name "*.py" -delete 2>/dev/null || true && \
    # Create health check script
    echo '#!/bin/sh\ncurl -f http://localhost:9374/ >/dev/null 2>&1 || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh

# Set up health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
    CMD /app/healthcheck.sh

# Expose port
EXPOSE 9374

# Use optimized supervisor config
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# Metadata
LABEL maintainer="DDC Team" \
      version="optimized-alpine" \
      description="Ultra-optimized DDC Alpine image for maximum performance" \
      image.size="minimal" \
      performance.level="maximum"