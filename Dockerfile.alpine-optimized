# Use the latest stable Alpine image as a base
FROM alpine:3.22.1

WORKDIR /app

# Install Python, pip, and other essential runtime and build dependencies
RUN apk add --no-cache --virtual .build-deps \
        gcc musl-dev python3-dev libffi-dev \
    && apk add --no-cache \
        python3 py3-pip \
        supervisor docker-cli ca-certificates tzdata curl

# Create and activate virtual environment
ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Upgrade core packaging tools to the latest secure versions FIRST
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements first to leverage Docker cache
COPY requirements-alpine.txt .

# Install Python packages from requirements file
RUN pip install --no-cache-dir -r requirements-alpine.txt

# Verify the installation immediately
RUN python -c "from werkzeug.test import Client; from flask import Flask; print('Werkzeug and Flask full import OK')"

# Copy the rest of the application code
COPY . .

# Copy supervisor configuration
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Clean up build dependencies now that packages are installed
RUN apk del .build-deps && \
    # Clean up Python cache and unnecessary files
    rm -rf /root/.cache/pip && \
    find / -name "*.pyc" -delete && \
    find / -name "__pycache__" -type d -exec rm -rf {} +

# Create necessary directories
RUN mkdir -p /app/config /app/logs && \
    chmod 755 /app/config /app/logs

# Expose port and set command
EXPOSE 9374
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]